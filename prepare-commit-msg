#! /usr/bin/env python3

#
# Copyright (c) Gustav le Dous
#
# WARNING: Use with caution. Partially made while drunk
#
from dataclasses import dataclass
from pathlib import Path
from subprocess import run, CalledProcessError
from typing import List, Tuple
import sys
import os

CONFIG_HASH_LENGTH = "hooks.submodule-commit-msg.hash-length"
CONFIG_MAX_COMMITS_LISTED = "hooks.submodule-commit-msg.max-commits-listed"
CONFIG_ENABLED = "hooks.submodule-commit-msg.enabled"
CONFIG_DEBUG = "hooks.submodule-commit-msg.debug"

CONFIG_DEFAULT_HASH_LENGTH = 8
CONFIG_DEFAULT_MAX_COMMITS_LISTED = 12


def do_git_command_single_line(*args, ok_status_codes: List[int] = []) -> str:
    lines = do_git_command_multi_line(*args, ok_status_codes=ok_status_codes)
    if len(lines) > 0:
        return lines[0]
    else:
        return ""


def do_git_command_multi_line(*args, ok_status_codes: List[int] = []) -> List[str]:
    process_result = run(["git"] + [str(arg) for arg in args], capture_output=True)
    if not ok_status_codes:
        process_result.check_returncode()
    else:
        if process_result.returncode not in ok_status_codes:
            raise CalledProcessError(process_result.returncode, process_result.args, process_result.stdout,
                                     process_result.stderr)

    raw_output = process_result.stdout.decode()
    result = [i.strip() for i in raw_output.splitlines()]
    return result


repo_root = Path(do_git_command_single_line("rev-parse", "--show-toplevel"))


def get_config_hash_length() -> int:
    config_value = do_git_command_single_line("-C", repo_root, "config", "--type", "int", CONFIG_HASH_LENGTH,
                                              ok_status_codes=[0, 1])
    if not config_value:
        return CONFIG_DEFAULT_HASH_LENGTH
    try:
        return int(config_value)
    except Exception as e:
        fail(f"Value {config_value!r} is not valid for config {CONFIG_HASH_LENGTH}")


def get_config_max_shown() -> int:
    config_value = do_git_command_single_line("-C", repo_root, "config", "--type", "int", CONFIG_MAX_COMMITS_LISTED,
                                              ok_status_codes=[0, 1])
    if not config_value:
        return CONFIG_DEFAULT_MAX_COMMITS_LISTED
    try:
        return int(config_value)
    except Exception as e:
        fail(f"Value {config_value!r} is not valid for config {CONFIG_MAX_COMMITS_LISTED}")


def is_debug() -> bool:
    return do_git_command_single_line("-C", repo_root, "config", "--type", "bool", CONFIG_DEBUG,
                                      ok_status_codes=[0, 1]) == "true"


def is_enabled() -> bool:
    value = do_git_command_single_line("-C", repo_root, "config", "--type", "bool", CONFIG_ENABLED,
                                       ok_status_codes=[0, 1])
    print(repr(value))
    if not value:
        return True
    return value == "true"


@dataclass(frozen=True)
class Submodule:
    name: str
    path: str


def find_submodules(modules_path: Path) -> List[Submodule]:
    try:
        config_lines = do_git_command_multi_line("config", "--file", modules_path, "--get-regexp", "path")
    except CalledProcessError:
        return []

    result = []
    for module in config_lines:
        if not module:
            continue
        config_module, path = module.split(' ')
        module_name = config_module.split('.')[1]
        result.append(Submodule(module_name, path))
    return result


def find_previous_and_current_submodules(compare_commit: str) -> Tuple[List[Submodule], List[Submodule]]:
    # This detect added/removed submodules.

    tmp_file = repo_root / "submodule_cmd_hook_tmp"
    try:
        # staged modules
        with open(tmp_file, mode="wb+") as write_me:
            result = run(["git", "-C", str(repo_root), "show", ":.gitmodules", "--", ], stdout=write_me)
        if result.returncode == 0:
            current_modules = find_submodules(tmp_file)
        else:
            current_modules = []

        # submodules found in last commit
        with open(tmp_file, mode="wb+") as write_me:
            result = run(["git", "-C", str(repo_root), "show", f"{compare_commit}:.gitmodules", ], stdout=write_me)
        if result.returncode == 0:
            previous_modules = find_submodules(tmp_file)
        else:
            previous_modules = []

    finally:
        tmp_file.unlink(missing_ok=True)

    return previous_modules, current_modules


def find_previous_revision(path: str, compare_commit: str) -> str:
    # Revision of submodule which is stored in the specified commit
    # git ls-tree HEAD submodule1
    # 160000 commit c2005918d53fa8d63af5d8ce059f3233969b35ea  submodule1
    # NOTE tab before module name                           /\
    raw = do_git_command_single_line("-C", str(repo_root), "ls-tree", compare_commit, path)
    raw = raw[:raw.index('\t')]
    return raw.strip().split(' ')[2]


def find_staged_revision(path: str) -> str:
    # Revision of submodule which is currently staged
    # git ls-files -s submodule1
    # 160000 commit c2005918d53fa8d63af5d8ce059f3233969b35ea 0  submodule1

    raw = do_git_command_single_line('-C', str(repo_root), 'ls-files', '-s', path)
    return raw.split(' ')[1]


def format_submodule_staged_commits(module_name: str, module_path: str, compare_commit: str) -> List[str]:
    head = find_previous_revision(module_path, compare_commit)
    staged = find_staged_revision(module_path)
    """
    There are three cases.
     - if head==staged no changes
     - elif (git log head..staged contains commits) -> submodule advanced forwards
     - else -> submodule regressed 
    """

    if head == staged:
        return []

    max_commits_shown = get_config_max_shown()
    hash_length = get_config_hash_length()

    max_commits_to_extract = max_commits_shown + 1
    commits = do_git_command_multi_line('-C', repo_root / module_path, 'log', '--pretty=oneline', '-n',
                                        max_commits_to_extract,
                                        f"{head}..{staged}")

    result = [f"{module_name}:"]

    if not commits:
        # Regression...
        downgrade_to = do_git_command_single_line('-C', repo_root / module_path, 'log', '-n', '1', '--format=%s',
                                                  staged)
        result.append(f"    Downgrade to: {staged[:hash_length]} {downgrade_to}")

    for line in commits[:max_commits_shown]:
        splitted = line.split(' ')

        # only use specified length for commit-hash
        commit_hash = splitted[0][:hash_length]
        commit_msg = ' '.join(splitted[1:])
        result.append(f'    {commit_hash} {commit_msg}')

    if len(commits) > max_commits_shown:
        # if truncated
        total_commits = do_git_command_single_line('-C', repo_root / module_path, 'rev-list', '--count',
                                                   f"{head}..{staged}")
        not_shown_commits = int(total_commits) - max_commits_shown
        result.append(f'    ... +{not_shown_commits} more')

    return result


def generate_changeset_description(compare_commit: str) -> List[str]:
    previous_modules, current_modules = find_previous_and_current_submodules(compare_commit)

    added_modules = set(current_modules).difference(set(previous_modules))
    removed_modules = set(previous_modules).difference(set(current_modules))
    consistent_modules = set(previous_modules).intersection(set(current_modules))

    chunks = []
    for added in added_modules:
        chunks.append([
            added.name + ':',
            "    Added"
        ])

    for removed in removed_modules:
        chunks.append([
            removed.name + ':',
            "    Removed"
        ])

    for submodule in sorted(consistent_modules, key=lambda x: x.name):
        chunks.append(format_submodule_staged_commits(submodule.name, submodule.path, compare_commit))

    lines = []
    for chunk in chunks:
        if chunk:
            lines.extend(chunk)
            lines.append("")

    return lines


def inject_submodule_changeset(existing_changeset: List[str], compare_commit: str, existing_trailers: List[str]) -> \
        List[str]:
    to_inject = generate_changeset_description(compare_commit)

    has_changes = bool(to_inject)

    entry_header = "Submodule changes:"
    entry_footer = "End of submodule changes:"

    already_has_entry = entry_header in existing_changeset and entry_footer in existing_changeset
    to_insert = [entry_header, *to_inject, entry_footer]

    header_index, footer_index = -1, -1
    if already_has_entry:
        header_index = existing_changeset.index(entry_header)
        footer_index = existing_changeset.index(entry_footer)

    # 4 cases
    if not has_changes and not already_has_entry:
        # ok!
        result = existing_changeset

    if not has_changes and already_has_entry:
        # remove the changeset
        result = existing_changeset[:header_index] + existing_changeset[footer_index + 1:]

    if has_changes and not already_has_entry:
        # insert at the end but before any trailers

        index_of_first_trailer = len(existing_changeset)
        for index, line in enumerate(existing_changeset):
            if line in existing_trailers:
                index_of_first_trailer = index
                break

        newlines = []
        if index_of_first_trailer - 1 >= 0:
            if existing_changeset[index_of_first_trailer - 1]:
                newlines.append("")

        result = existing_changeset.copy()

        result[index_of_first_trailer:index_of_first_trailer] = newlines + to_insert + [""]

    if has_changes and already_has_entry:
        # replace entry

        result = existing_changeset[:header_index] \
                 + to_insert + existing_changeset[footer_index + 1:]

    # add newline at the end
    if result[-1]:
        result.append("")

    return result


def apply_changes(filename: str, compare_commit: str):
    existing_trailers = do_git_command_multi_line("interpret-trailers", "--parse", filename)

    with open(filename, 'r') as f:
        content = [line.strip() for line in f.readlines()]

    with open(filename, 'w') as f:
        f.writelines(
            line + os.linesep for line in inject_submodule_changeset(content, compare_commit, existing_trailers))


def fail(message: str):
    if is_debug():
        raise ValueError(message)
    else:
        print(f"Error in Submodule-list-changes-hook: {message}")
        sys.exit(0)


def main():
    # First the arguments according to
    # https://git-scm.com/docs/githooks#_pre_merge_commit

    if len(sys.argv) < 2:
        fail("Missing file containing input file")
    existing_commit_msg_path = sys.argv[1]

    if len(sys.argv) < 3:
        # regular commit. No special parameters. Compare with HEAD
        prev_commit_source = "HEAD"
    else:
        # A special option is provided
        commit_type = sys.argv[2]
        if commit_type == "message":
            # Message provided explicitly. We should insert
            prev_commit_source = "HEAD"
        elif commit_type in ("merge", "squash"):
            fail("Not supported for merge/squash")
        elif commit_type == "commit":
            # This implies --amend
            # We should compare with the commit before the provided object
            if len(sys.argv) < 4:
                fail("Commit type is 'commit' but no object name was given")
            obj = sys.argv[3]
            prev_commit_source = f"{obj}~1"
        else:
            fail(f"Unknown commit-type option {commit_type}")

    if not is_enabled():
        print("Submodule-list-changes-hook is disabled")
        sys.exit(0)

    try:
        apply_changes(existing_commit_msg_path, prev_commit_source)
    except Exception as e:
        if is_debug():
            raise e
        else:
            fail(str(e))


if __name__ == '__main__':
    main()
